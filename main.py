import asyncio
import sqlite3 as sq
import decimal
import random

from decimal import Decimal
from database import db, cur, registration, balance, blockname
from config import access_token, welcome_text, payments_token, coinflip_x
from aiogram.types import Message, LabeledPrice, PreCheckoutQuery
from aiogram import Bot, Dispatcher, F
from keyboard import main_keyboard, back_button, games_keyboard, coinflip_keyboard

bot = Bot(token=access_token)
dp = Dispatcher()


@dp.message(F.text == "/start")
async def get_start(message: Message):
    try:
        cur.execute(f"INSERT INTO users (user_id) VALUES ({message.from_user.id})")
        db.commit()

        await message.answer(welcome_text, reply_markup=main_keyboard)

    except sq.IntegrityError:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)


@dp.message(F.text == "–ë–∞–ª–∞–Ω—Å üí∞")
async def get_balance(message: Message):
    if registration(message.from_user.id):
        await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {balance(message.from_user.id)}‚ÇΩ")


@dp.message(F.text == "–í—ã–±—Ä–∞—Ç—å –∏–≥—Ä—É üé∞")
async def get_games(message: Message):
    if registration(message.from_user.id):
        cur.execute(f"UPDATE users SET blockname = 'games' WHERE user_id == {message.from_user.id}")
        db.commit()

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É: ", reply_markup=games_keyboard)


@dp.message(F.text == "–ü–æ–ø–æ–ª–Ω–∏—Ç—å üíµ")
async def get_deposit(message: Message):
    if registration(message.from_user.id):
        cur.execute(f"UPDATE users SET blockname = 'deposit' WHERE user_id == {message.from_user.id}")
        db.commit()

        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: ", reply_markup=back_button)


@dp.message(F.text == "–ù–∞–∑–∞–¥")
async def get_back(message: Message):
    if registration(message.from_user.id):
        if blockname(message.from_user.id) in ["games", "deposit"]:
            cur.execute(f"UPDATE users SET blockname = 'main' WHERE user_id == {message.from_user.id}")
            await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard)

        elif blockname(message.from_user.id) in ["coinflip", "cf_bet1", "cf_bet2"]:
            cur.execute(f"UPDATE users SET blockname = 'games' WHERE user_id == {message.from_user.id}")
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É: ", reply_markup=games_keyboard)

        db.commit()


@dp.message(F.text == "CoinFlip üçã")
async def get_coinflip(message: Message):
    if registration(message.from_user.id):
        cur.execute(f"UPDATE users SET blockname = 'coinflip' WHERE user_id == {message.from_user.id}")
        db.commit()

        await message.answer("–°–¥–µ–ª–∞–π—Ç–µ —Å—Ç–∞–≤–∫—É: –û—Ä–µ–ª / –†–µ—à–∫–∞", reply_markup=coinflip_keyboard)


@dp.message(F.text == "–û—Ä–µ–ª")
@dp.message(F.text == "–†–µ—à–∫–∞")
async def get_coinflip_bet(message: Message):
    if registration(message.from_user.id):
        if blockname(message.from_user.id) in ["coinflip", "cf_bet1", "cf_bet2"]:
            if message.text == "–û—Ä–µ–ª":
                cur.execute(f"UPDATE users SET blockname = 'cf_bet1' WHERE user_id == {message.from_user.id}")

            elif message.text == "–†–µ—à–∫–∞":
                cur.execute(f"UPDATE users SET blockname = 'cf_bet2' WHERE user_id == {message.from_user.id}")

            await message.answer(f"–í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: {message.text}\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance(message.from_user.id)}‚ÇΩ\n\n–í–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
            db.commit()


@dp.message(F.text)
async def get_text(message: Message):
    if registration(message.from_user.id):
        if blockname(message.from_user.id) == "deposit":    # DEPOSIT
            try:
                deposit = Decimal(message.text).quantize(Decimal("1.00"), rounding=decimal.ROUND_DOWN)

                if deposit < Decimal("100"):
                    await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: 100.00‚ÇΩ")

                elif Decimal(message.text).quantize(Decimal("1.00"), rounding=decimal.ROUND_UP) > Decimal("1000000"):
                    await message.answer("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞: 1000000.00‚ÇΩ")

                else:
                    await bot.send_invoice(
                        message.from_user.id,
                        prices=[LabeledPrice(label=f"AMG4GAMES –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê", amount=int(deposit * 100))],
                        provider_token=payments_token,
                        title=f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞",
                        description=f"\n",
                        payload="AMG4GAMES",
                        currency="rub")

            except decimal.InvalidOperation:
                await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –¥–µ–ø–æ–∑–∏—Ç–∞")

        elif blockname(message.from_user.id) in ["cf_bet1", "cf_bet2"]:
            try:
                bet = Decimal(message.text).quantize(Decimal("1.00"))
                cf_random = random.randint(1, 2)

                if bet < Decimal("0.01"):
                    await message.answer("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏: 0.01‚ÇΩ")

                elif bet > balance(message.from_user.id):
                    await message.answer(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance(message.from_user.id)}‚ÇΩ")

                else:
                    cf_result = "–û—Ä–µ–ª" if cf_random == 1 else "–†–µ—à–∫–∞"
                    if blockname(message.from_user.id) == f"cf_bet{cf_random}":
                        cur.execute(f"UPDATE users SET balance = {balance(message.from_user.id) + bet * Decimal(coinflip_x)} WHERE user_id == {message.from_user.id}")
                        await message.answer(f"–í—ã –≤—ã–π–≥—Ä–∞–ª–∏: {(bet * Decimal(coinflip_x)).quantize(Decimal("1.00"))}‚ÇΩ ‚úÖ\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã: {cf_result}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance(message.from_user.id)}‚ÇΩ")

                    else:
                        cur.execute(f"UPDATE users SET balance = {balance(message.from_user.id) - bet} WHERE user_id == {message.from_user.id}")
                        await message.answer(f"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏: {bet}‚ÇΩ ‚ùå\n–†–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã: {cf_result}\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance(message.from_user.id)}‚ÇΩ")

                    db.commit()

            except decimal.InvalidOperation:
                await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–∫–∏")


@dp.pre_checkout_query(lambda query: True)
async def get_pay(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
    cur.execute(f"UPDATE users SET balance = balance + {pre_checkout_q.total_amount / 100} WHERE user_id == {pre_checkout_q.from_user.id}")
    cur.execute(f"UPDATE users SET deposit = deposit + {pre_checkout_q.total_amount / 100} WHERE user_id == {pre_checkout_q.from_user.id}")
    db.commit()


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
